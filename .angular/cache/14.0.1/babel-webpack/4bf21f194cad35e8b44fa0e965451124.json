{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { Path } from 'src/app/utils/paths';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/token/token-storage.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"src/app/services/toast/taosts.service\";\nimport * as i6 from \"@angular/common\";\n\nfunction LoginComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Email Field Is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Password Field Is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"opacity-20 cursor-not-allowed\": a0,\n    \"opacity-100 cursor-pointer\": a1\n  };\n};\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(authService, router, tokenStorage, formBuilder, taostService) {\n      this.authService = authService;\n      this.router = router;\n      this.tokenStorage = tokenStorage;\n      this.formBuilder = formBuilder;\n      this.taostService = taostService;\n      this.isLoggedIn = false;\n      this.isLoggedInFailed = false;\n      this.errorMsg = '';\n      this.buttonTxt = 'Login';\n    }\n\n    ngOnInit() {\n      // if(this.tokenStorage.getToken()) {\n      //   this.isLoggedIn = true;\n      //   this.router.navigate([Path.DASHBOARD]);\n      // }\n      this.loginForm = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]]\n      });\n    } // openSnackBar\n\n\n    openSnackBar(message) {\n      this.taostService.openSnackBar(message);\n    } // onSubmit\n\n\n    onSubmit() {\n      const auth = {\n        email: this.loginForm.value.email,\n        password: this.loginForm.value.password\n      };\n      this.buttonTxt = 'Logging in...';\n      this.authService.login(auth).subscribe(data => {\n        // this.tokenStorage.saveToken(data.data.token);\n        this.isLoggedIn = true;\n        this.openSnackBar('Login Successful');\n        this.router.navigate([Path.DASHBOARD]);\n      }, error => {\n        this.isLoggedInFailed = true;\n        this.errorMsg = error.error.message;\n        this.openSnackBar(this.errorMsg);\n      }); // this.authService.login().subscribe(\n      //   data => {\n      //     // this.tokenStorage.saveToken(data.data.email);\n      //     // check if data.data.email is = auth.email and data.data.password is = auth.password else return error\n      //     const user = data.data.find((user:any)=>{\n      //       return user.email === auth.email && user.password === auth.password\n      //     })\n      //     if(user) {\n      //     // this.isLoggedIn = true;\n      //     this.router.navigate([Path.DASHBOARD]);\n      //     } else {\n      //       // this.isLoggedInFailed = true;\n      //       this.errorMsg = 'Invalid email or password';\n      //     }\n      //   }\n      // , error => {\n      //   this.isLoggedInFailed = true;\n      //   this.errorMsg = error.error.message;\n      // }\n      // )\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.TokenStorageService), i0.ɵɵdirectiveInject(i4.UntypedFormBuilder), i0.ɵɵdirectiveInject(i5.TaostsService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 22,\n    vars: 10,\n    consts: [[1, \"Login\"], [1, \"loginTxts\"], [1, \"loginForm\", 3, \"formGroup\", \"ngSubmit\"], [\"class\", \"info text-red-500 font-bold\", 4, \"ngIf\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"ngClass\", \"disabled\"], [1, \"link\"], [\"routerLink\", \"/register\", 1, \"underline\"], [1, \"info\", \"text-red-500\", \"font-bold\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n        i0.ɵɵtext(3, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"h2\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtemplate(7, LoginComponent_span_7_Template, 2, 0, \"span\", 3);\n        i0.ɵɵelementStart(8, \"label\", 4);\n        i0.ɵɵtext(9, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 5);\n        i0.ɵɵtemplate(11, LoginComponent_span_11_Template, 2, 0, \"span\", 3);\n        i0.ɵɵelementStart(12, \"label\", 6);\n        i0.ɵɵtext(13, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 7);\n        i0.ɵɵelementStart(15, \"button\", 8);\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"p\", 9)(18, \"a\", 10);\n        i0.ɵɵtext(19, \"Register \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"span\");\n        i0.ɵɵtext(21, \"Here If You do not have an account\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.errorMsg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].dirty && ctx.loginForm.hasError(\"required\", \"email\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"password\"].dirty && ctx.loginForm.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c0, !ctx.loginForm.valid, ctx.loginForm.valid))(\"disabled\", !ctx.loginForm.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.buttonTxt);\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgIf, i2.RouterLinkWithHref, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n    styles: [\".Login[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;margin-top:7rem}.Login[_ngcontent-%COMP%]   .loginTxts[_ngcontent-%COMP%]{color:#fff}.Login[_ngcontent-%COMP%]   .loginTxts[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;margin-bottom:1rem}.Login[_ngcontent-%COMP%]   .loginForm[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:1rem;font-weight:700;margin:.5rem 0;color:#fff}.Login[_ngcontent-%COMP%]   .loginForm[_ngcontent-%COMP%]{display:flex;flex-direction:column}.Login[_ngcontent-%COMP%]   .loginForm[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:20rem;height:2rem;border-radius:2rem;border:1px solid white;padding:.5rem;margin:.5rem 0}.Login[_ngcontent-%COMP%]   .loginForm[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{width:20rem;height:2rem;border-radius:2rem;border:1px solid white;margin:.5rem 0;background-color:#fff;color:#000;font-weight:700}.btn[_ngcontent-%COMP%], .link[_ngcontent-%COMP%]{color:#fff}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}